import java.util.Scanner;
import java.util.*;

class Batman {
    public int initialX;
    public int initialY;
    public int actualX;
    public int actualY;
    public int beforeOneX;
    public int beforeOneY;

    public int maxX;
    public int maxY;

    public int minX;
    public int minY;

    public Batman(int initialX, int initialY){
        this.initialX = initialX;
        this.initialY = initialY;

        System.err.println("initialX: " + initialX);
        System.err.println("initialY: " + initialY);
    }

    public Batman(){}

    public void updateCoordinates(Bomb bomb){
        if(bomb.actualDir.contains(bomb.DOWN)){
            if(bomb.beforeDir.contains(bomb.UP)){
                this.maxY = this.beforeOneY;
                this.minY = this.actualY;
            }
            if(this.actualY == this.beforeOneY) {
                this.actualY = this.actualY + 1;
            }else {
                this.updateBeforeY();
                this.actualY = Math.round(this.actualY + (this.maxY - this.actualY)/2);
            }
        }

        if(bomb.actualDir.contains(bomb.UP)){
            if(bomb.beforeDir.contains(bomb.DOWN)) {
                this.maxY = this.actualY;
                this.minY = this.beforeOneY;
            }
            if(this.actualY == this.beforeOneY) {
                this.actualY = this.actualY - 1;
            }else{
                this.updateBeforeY();
                if(!(this.actualY % 2 == 0)) this.actualY = this.actualY - 1;
                this.actualY = Math.round(this.actualY - (this.actualY - this.minY)/2);
            }
        }

        if(bomb.actualDir.contains(bomb.LEFT)){
            if(bomb.beforeDir.contains(bomb.RIGHT)){
                this.minX = this.beforeOneX;
                this.maxX = this.actualX;
            }
            if(this.actualX == this.beforeOneX) {
                this.actualX = this.actualX - 1;
            }else{
                this.updateBeforeX();
                if(!(this.actualX % 2 == 0)) this.actualX = this.actualX - 1;
                this.actualX = Math.round(this.actualX - (this.actualX - this.minX)/2);
            }
        }

        if(bomb.actualDir.contains(bomb.RIGHT)){
            if(bomb.beforeDir.contains(bomb.LEFT)){
                this.maxX = this.beforeOneX;
                this.minX = this.actualX;
            }

            System.err.println("maxX: " + this.maxX);

            if(this.actualX == this.beforeOneX) {
                this.actualX = this.actualX + 1;
            }else{
                this.updateBeforeX();
//                if(!(this.actualX % 2 == 0)) this.actualX = this.actualX - 1;
                this.actualX = Math.round(this.actualX + (this.maxX - this.actualX)/2);
            }
        }
    }

    private void updateBeforeX(){
        this.beforeOneX = this.actualX;
    }

    private void updateBeforeY(){
        this.beforeOneY = this.actualY;
    }
}


class Bomb {
    public static String DOWN = "D";
    public static String UP = "U";
    public static String LEFT = "L";
    public static String RIGHT = "R";
    public String actualDir;
    public String beforeDir;
    public int coordinateX;
    public int coordinateY;

    public Bomb(){};

    public Bomb(int coordinateX, int coordinateY){
        this.coordinateX = coordinateX;
        this.coordinateY = coordinateY;
    }

    public void updateBeforeDirection(){
        if(this.actualDir == null) this.beforeDir = "";
        else this.beforeDir = this.actualDir;
    }

    public void updateActualDirection(Player player, Batman batman){
        String bombDir = this.updateDirection(player.scanner, player.useCodeGymValues, batman);
        this.actualDir = bombDir;
    }

    public void updateBeforeDirectionAfterEachTurn(){
        this.beforeDir = this.actualDir;
    }

    private String updateDirection(Scanner input, boolean useCodeGymValue, Batman batman){
        if(useCodeGymValue) return input.next();
        else {
            String bombDir = "";
            if(this.coordinateY > batman.actualY) bombDir += "D";
            if(this.coordinateY == batman.actualY) bombDir += "";
            if(this.coordinateY < batman.actualY) bombDir += "U";

            if(this.coordinateX > batman.actualX) bombDir += "R";
            if(this.coordinateX == batman.actualX) bombDir += "";
            if(this.coordinateX < batman.actualX) bombDir += "L";

            return bombDir;
        }
    }
}

class Building {
    int width;
    int height;

    public Building(int Width, int height){
        this.width = Width;
        this.height = height;

        System.err.println("buildingWidth: " + Width);
        System.err.println("buildingHeight: " + height);
    }
}

class Game {

    public String play(Player player, Bomb bomb, Batman batman, Building building){
        initValues(player, bomb, batman, building);

        int countTurn = 0;

        System.err.println("");

        // game loop
        while (this.possiblyContinueLoop(bomb, batman, player.useCodeGymValues)) {
            countTurn ++;
            if(countTurn > player.N){
                return "YOU LOST";
            }else {
                bomb.updateBeforeDirection();
                bomb.updateActualDirection(player, batman);

                batman.updateCoordinates(bomb);

                System.err.println("");

                System.err.println("bombDir: " + bomb.actualDir);
                System.err.println("bombDirX: " + bomb.coordinateX + " bombDirY: " + bomb.coordinateY);
                System.err.println("player.actualX: " + batman.actualX + " player.actualY: " + batman.actualY);
                System.out.println(("" + batman.actualX) + " " + ("" + batman.actualY));

                bomb.updateBeforeDirectionAfterEachTurn();
            }
        }
        return "YOU WIN";
    }

    private void initValues(Player player, Bomb bomb, Batman batman, Building building){
        batman.minY = 0;
        batman.minX = 0;

        batman.maxY = building.height;
        batman.maxX = building.width;

        batman.actualX = batman.initialX;
        batman.actualY = batman.initialY;

        if(player.useCodeGymValues){
            bomb.coordinateX = 0;
            bomb.coordinateY = 0;
        }
    }

    private boolean possiblyContinueLoop(Bomb bomb, Batman batman, boolean useCodeGymValue){
        if(useCodeGymValue) return useCodeGymValue;
        else return !((batman.actualX == bomb.coordinateX) && (batman.actualY == bomb.coordinateY));
    }
}


/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Player {
    boolean useCodeGymValues;
    int N;
    Scanner scanner;

    public Player(
            boolean useCodeGymValues,
            int N,
            Scanner scanner
    ){
        this.useCodeGymValues = useCodeGymValues;
        this.N = N;
        this.scanner = scanner;

        System.err.println("maxTurns: " + N);
    }

    public static void main(String args[]) {
        Game game = new Game();
        Scanner in = new Scanner(System.in);

        int buildingWidth = in.nextInt();
        int buildingHeight = in.nextInt();
        int N = in.nextInt();
        int batmanInitialX = in.nextInt();
        int batmanInitialY = in.nextInt();

        game.play(
                new Player(true, N, in),
                new Bomb(),
                new Batman(batmanInitialX, batmanInitialY),
                new Building(buildingWidth, buildingHeight)
        );
    }
}
