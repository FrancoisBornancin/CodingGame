import java.util.List;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.List;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Game {

    public String play(Solution solution){
        PossibleTelephoneNumberCounter possibleTelephoneNumberCounter = new PossibleTelephoneNumberCounter();
        NodeListInitializer nodeListInitializer = new NodeListInitializer();

        return String.valueOf(
                possibleTelephoneNumberCounter
                        .countDistinctTelephoneNumbers(
                                nodeListInitializer.initList(
                                        solution.telephonNumberList
                                )
                        )
        );
    }
}


class Node {
    int indexForCommonElement;
    String commonElement;
    List<Node> distinctElements;
}


class NodeListInitializer {
    public List<Node> initList(List<String> telephoneNumberList){

        List<Node> nodeList =
            fillCommonElementNodeList(telephoneNumberList, 0);

        fillSucessively(nodeList, telephoneNumberList);
        return nodeList;
    }

    private void fillSucessively(List<Node> nodeList, List<String> telephoneNumberList){
        nodeList.forEach(node -> {
            node.distinctElements = new ArrayList<>();
            try{
                List<String> truncatedTelephoneList =
                        telephoneNumberList.stream()
                                .filter(truncatedTelephoneNumber -> truncatedTelephoneNumber.startsWith(node.commonElement))
                                .map(telephoneNumber -> telephoneNumber.substring(node.indexForCommonElement + 1))
                                .filter(telephoneNumber -> !telephoneNumber.equals(""))
                                .collect(Collectors.toList());

                node.distinctElements
                        = fillCommonElementNodeList(truncatedTelephoneList, node.indexForCommonElement);

                node.distinctElements.forEach(
                        distinctNode -> fillSucessively(node.distinctElements, truncatedTelephoneList)
                );
            }catch (StringIndexOutOfBoundsException e){
                node.distinctElements = List.of();
            }

        });
    }

    private List<Node> fillCommonElementNodeList(List<String> telephoneNumberList, int charToStartIndex){
        return telephoneNumberList.stream()
                .map(element -> element.charAt(0))
                .distinct()
                .map(element -> {
                    Node node = new Node();
                    node.commonElement = element.toString();
                    node.indexForCommonElement = charToStartIndex;
                    return node;
                })
                .toList();
    }
}


class PossibleTelephoneNumberCounter {
    int count;
    public int countDistinctTelephoneNumbers(List<Node> nodeList){
        this.count += nodeList.size();

        nodeList.forEach(node -> countDistinctTelephoneNumbers(node.distinctElements));

        return count;
    }
}


class Solution {
    List<String> telephonNumberList;

    public static void main(String args[]) {
        Solution solution = new Solution();
        solution.telephonNumberList = new ArrayList<>();

        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        System.err.println("N: " + N);
        for (int i = 0; i < N; i++) {
            String telephone = in.next();
            solution.telephonNumberList.add(telephone);
        }

        Game game = new Game();
        System.out.println(game.play(solution));
    }
}
