import java.util.List;
import java.util.List;
import java.util.ArrayList;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;


class FirstNodesRetriever {
    public List<Node> retrieveFirstNodes(List<Node> nodeList){
        return null;
    }
}


class Game {
    public int play(List<Node> relationShipList){



        return 0;
    }
}


class Node {
    List<Node> influencorsList;
    List<Node> influenceesList;
    int currentValue;

    public Node(int currentValue){
        this.currentValue = currentValue;
    }

    public Node(int currentValue, Node influencee){
        this.currentValue = currentValue;
        if(influenceesList == null) influenceesList = new ArrayList<>();
        influenceesList.add(influencee);
        influencee.addInfluencor(this);
    }

    public Node(Node influencor, int currentValue){
        this.currentValue = currentValue;
        if(influencorsList == null) influencorsList = new ArrayList<>();
        influencorsList.add(influencor);
        influencor.addInfluencee(this);
    }

    public void addInfluencee(Node influencee){
        if(this.influenceesList == null) influenceesList = new ArrayList<>();
        influenceesList.add(influencee);
    }

    public void addInfluencor(Node influencor){
        if(this.influencorsList == null) influencorsList = new ArrayList<>();
        influencorsList.add(influencor);
    }
}


class NodeSetContainer {
    List<Node> noDuplicatesNodes;

    public void fillNodeList(Node nodeToAdd){
        addNode(nodeToAdd);
        addInfluencorsToCurrent(
                getNode(nodeToAdd.currentValue),
                nodeToAdd.influencorsList
        );
        addInfluenceesToCurrent(
                getNode(nodeToAdd.currentValue),
                nodeToAdd.influenceesList
        );
        addOtherNodesToList(nodeToAdd.influenceesList);
        addOtherNodesToList(nodeToAdd.influencorsList);
    }

    private void addOtherNodesToList(List<Node> nodeList){
        if(nodeList != null){
            if(noDuplicatesNodes == null) noDuplicatesNodes = new ArrayList<>();
            nodeList.forEach(this::addNode);
        }
    }

    private Node getNode(int currentValue){
        return noDuplicatesNodes.stream()
                .filter(node -> node.currentValue == currentValue)
                .findFirst()
                .get();
    }

    private void addNode(Node nodeToAdd){
        if(noDuplicatesNodes == null) noDuplicatesNodes = new ArrayList<>();

        boolean isNodeAlreadyPresent =
                noDuplicatesNodes.stream()
                        .map(node -> node.currentValue)
                        .anyMatch(currentValue -> currentValue == nodeToAdd.currentValue);

        if(!isNodeAlreadyPresent) noDuplicatesNodes.add(nodeToAdd);
    }

    private void addInfluencorsToCurrent(Node node, List<Node> influencorsList){
        if(node.influencorsList != null){
            if(!new HashSet<>(node.influencorsList).containsAll(influencorsList)) node.influencorsList.addAll(influencorsList);
        }
    }

    private void addInfluenceesToCurrent(Node node, List<Node> influenceesList){
        if(node.influenceesList != null){
            if(!new HashSet<>(node.influenceesList).containsAll(influenceesList)) node.influenceesList.addAll(influenceesList);
        }
    }
}


class Solution {
    public static void main(String args[]) {
        Game game = new Game();

        Scanner in = new Scanner(System.in);
        int n = in.nextInt(); // the number of relationships of influence

        System.err.println("number of relationships: " + n);

        List<Node> relationShipList = new ArrayList<>();

        for (int a = 0; a < n; a++) {
            int x = in.nextInt(); // a relationship of influence between two people (x influences y)
            int y = in.nextInt();

            relationShipList.add(new Node(x, new Node(y)));

            System.err.println("nÂ°: " + (a + 1) + " " + x + " -> " + y);
        }

        System.err.println("relationShipList: " + relationShipList);

        System.out.println(game.play(relationShipList));
    }
}
