import java.util.List;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.List;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;


class FirstNodesRetriever {
    public List<Node> retrieveFirstNodes(List<Node> nodeList){
        return nodeList.stream()
                .filter(node -> node.influencorsList.isEmpty())
                .toList();
    }
}


class Game {
    public int play(List<Node> relationShipList){
        NodeSetContainer nodeSetContainer = new NodeSetContainer();
        FirstNodesRetriever firstNodesRetriever = new FirstNodesRetriever();
        NodeChainCounter nodeChainCounter = new NodeChainCounter();

        relationShipList.forEach(nodeSetContainer::fillNodeList);

        List<Node> firstNodesList =
            firstNodesRetriever.retrieveFirstNodes(nodeSetContainer.noDuplicatesNodes);

        Set<Integer> allNodesElements =
                nodeChainCounter.getAllPossibleCount(firstNodesList);

        return Collections.max(allNodesElements);

    }
}


class Node {
    Set<Integer> currentAndPreviousNodes;
    List<Node> influencorsList;
    List<Node> influenceesList;
    int currentValue;
    int influenceeValue;
    boolean hasInfluenceeNotCounted;

    public Node(int currentValue, int influenceeValue){
        this.currentValue = currentValue;
        this.influenceeValue = influenceeValue;
    }

    public Node(int currentValue){
        this.currentValue = currentValue;
    }
}


class NodeChainCounter {
    Set<Integer> allNodesElements;
    public Set<Integer> getAllPossibleCount(List<Node> nodeList){
        allNodesElements = new HashSet<>();

        nodeList.forEach(node -> {
            initCurrentAndPrevious(node);
            node.currentAndPreviousNodes.add(1);
            fillCurrentAndPreviousNodes(node);
        });

        return allNodesElements;
    }

    private void initCurrentAndPrevious(Node node){
        if(node.currentAndPreviousNodes == null) node.currentAndPreviousNodes = new HashSet<>();
    }

    private void fillCurrentAndPreviousNodes(Node node){
        initCurrentAndPrevious(node);
        if(!node.influenceesList.isEmpty()){
            node.influenceesList.forEach(influenceeNode -> {
                initCurrentAndPrevious(influenceeNode);
                node.currentAndPreviousNodes.forEach(nodeInt -> influenceeNode.currentAndPreviousNodes.add(nodeInt + 1));
                fillCurrentAndPreviousNodes(influenceeNode);
            });
        }else{
            allNodesElements.addAll(node.currentAndPreviousNodes);
        }
    }

}


class NodeSetContainer {
    List<Node> noDuplicatesNodes;

    public void fillNodeList(Node node){
        if(noDuplicatesNodes == null) noDuplicatesNodes = new ArrayList<>();

        Node nodeFromList = addIfNotPresent(node, noDuplicatesNodes);
        Node influenceeFromList = addIfNotPresent(new Node(node.influenceeValue), noDuplicatesNodes);

        addIfNotPresent(influenceeFromList, nodeFromList.influenceesList);
        addIfNotPresent(nodeFromList, influenceeFromList.influencorsList);
    }

    private Node addIfNotPresent(Node node, List<Node> nodeList){
        if(node.influenceesList == null) node.influenceesList = new ArrayList<>();
        if(node.influencorsList == null) node.influencorsList = new ArrayList<>();

        for(int a = 0 ; a < nodeList.size() ; a++){
            Node nodeFromList = nodeList.get(a);
            if(nodeFromList.currentValue == node.currentValue){
                return nodeFromList;
            }
        }
        nodeList.add(node);
        return node;
    }
}


class Solution {
    public static void main(String args[]) {
        Game game = new Game();

        Scanner in = new Scanner(System.in);
        int n = in.nextInt(); // the number of relationships of influence

        System.err.println("number of relationships: " + n);

        List<Node> relationShipList = new ArrayList<>();

        for (int a = 0; a < n; a++) {
            int x = in.nextInt(); // a relationship of influence between two people (x influences y)
            int y = in.nextInt();

            relationShipList.add(new Node(x, y));

            System.err.println("nÂ°:" + (a + 1) + "  " + x + " -> " + y);
        }

        System.err.println("relationShipList: " + relationShipList);

        System.out.println(game.play(relationShipList));
    }
}
